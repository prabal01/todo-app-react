{"version":3,"sources":["components/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","state","inputField","props","task","todo","editMode","done","index","changeTodoHandler","event","newField","target","value","setState","console","log","saveChange","newTask","cancelChange","editTodo","markDone","this","className","onClick","deleteTodo","onChange","Component","App","todos","changeHandler","newList","slice","concat","addTodoButton","push","ifEnter","keyCode","restListHandler","placeholder","type","onKeyDown","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.338ea0a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Todo extends Component {\n    state = {\n        inputField: this.props.task, todo: this.props.task, editMode: false\n        , done: false, index: this.props.index\n    }\n\n    // input binding\n    changeTodoHandler = event => {\n        const newField = event.target.value\n        this.setState({ inputField: newField })\n        console.log(this.state.inputField)\n    }\n    // save change if input is not empty\n    saveChange = () => {\n        const newTask = this.state.inputField\n        if (newTask) {\n\n            this.setState({ todo: newTask, editMode: false })\n        }\n        else {\n            this.setState({ editMode: false })\n        }\n\n    }\n\n    // restore todo\n    cancelChange = () => {\n        this.setState({ editMode: false })\n    }\n\n    editTodo = event => {\n        this.setState({ editMode: true })\n\n    }\n\n    markDone = event => {\n        this.setState({ done: true })\n    }\n\n\n    render() {\n        if (this.state.done === false) {\n\n            if (this.state.editMode === false) {\n\n                return (\n                    <div>\n\n                    <div className=\"todoCard-notDone\">\n                <p>{this.state.todo}</p>\n                    </div>\n                        <button className=\"small-btn\" onClick={this.editTodo}>Edit</button>\n                        <button className=\"small-btn\" onClick={this.markDone}>Done</button>\n                        <button className=\"small-btn\" onClick={() => this.props.deleteTodo(this.props.index)}> delete</button>\n                    </div>\n                )\n            }\n            else {\n                return (\n                    <div>\n                        <input className=\"editMode\" onChange={this.changeTodoHandler} value={this.state.inputField} ></input>\n                        <button className=\"small-btn\" onClick={this.saveChange}> save</button>\n                        <button className=\"small-btn\" onClick={this.cancelChange}>cancel</button>\n                    </div>\n                )\n            }\n        }\n        else {\n            return (\n                <div className=\"todoCard-done\">\n                    <p>{this.state.todo}</p>\n                </div>\n            )\n        }\n\n    }\n}\nexport default Todo","import './App.css';\nimport React, { Component } from 'react';\nimport Todo from \"./components/todo\"\n\n\n\nclass App extends Component {\n  state = {\n    todo: \"\",\n    todos: []\n  }\n  // inputField binding\n  changeHandler = event => {\n    this.setState({ todo: event.target.value })\n  }\n\n  // deleteTodo\n  deleteTodo = (index) => {\n    console.log(index)\n    let newList = [...this.state.todos]\n    newList = newList.slice(0, index).concat(newList.slice(index + 1))\n    this.setState({\n      todos: newList\n    })\n\n  }\n\n  addTodoButton = event => {\n    if (this.state.todo) {\n      const newList = [...this.state.todos]\n      newList.push(this.state.todo)\n      this.setState({ todos: newList })\n      console.log(this.state.todos)\n    }\n  }\n  // add todo if enter key is pressed\n  ifEnter = (event) => {\n    if (event.keyCode === 13) {\n      if (this.state.todo) {\n        const newList = [...this.state.todos]\n        newList.push(this.state.todo)\n        this.setState({ todos: newList })\n        console.log(this.state.todos)\n      };\n    }\n  };\n  restListHandler = () => {\n    this.setState({ todos: [] })\n  }\n\n  // render function\n  render() {\n    return (\n      <div>\n        <div className=\"header\"><h1>My ToDo</h1></div>\n\n        <button className=\"reset-btn\" onClick={this.restListHandler}>Reset List</button>\n        <div className=\"appBody\">\n          <input placeholder=\"Press Enter to Add\" type=\"text\" onChange={this.changeHandler} onKeyDown={this.ifEnter} value={this.state.todo} />\n          <button className=\"add-button\" onClick={this.addTodoButton} >Add Todo</button><br />\n          {this.state.todos.map((task,index) => <Todo\n            task={task} \n            // udhar bhi atsk  \n            index={index}\n            key={task}\n            deleteTodo={this.deleteTodo}\n          />\n\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}